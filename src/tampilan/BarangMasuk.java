package tampilan;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;
import java.text.SimpleDateFormat;
import java.util.Date; 
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class BarangMasuk extends javax.swing.JPanel {
    private Connection conn;
    private DefaultTableModel tabmode;
    private Map<String, String> kodeBarang = new HashMap<>();
    private Map<String, String> kodeSupplier = new HashMap<>();
    
    public BarangMasuk() {
        initComponents();
        conn = new koneksi().connect();
        datatable();
        isiComboBoxKodeBarang();
        isiComboBoxKodeSupplier();
    }
    
    private void kosong() {
        tgl.setDate(null);
        kdbarang.setSelectedIndex(0);
        jml.setValue(0);
    }

    private void isiComboBoxKodeBarang() {
        kdbarang.removeAllItems(); // Bersihkan item yang mungkin sudah ada
        kodeBarang.clear(); // Bersihkan map dokter

        try {
            String sql = "SELECT kode_barang,nama_barang FROM barang";
            PreparedStatement stat = conn.prepareStatement(sql);
            ResultSet rs = stat.executeQuery();

            while (rs.next()) {
                String idBarang = rs.getString("kode_barang");
                String namaBarang = rs.getString("nama_barang");
                kdbarang.addItem(namaBarang);// Add a default item
                kodeBarang.put(namaBarang, idBarang); // Add SupplierItem objects
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal ambil data kode barang: " + e.getMessage());
        }
    }
    
    private void isiComboBoxKodeSupplier() {
        kdsupplier.removeAllItems(); // Bersihkan item yang mungkin sudah ada
        kodeSupplier.clear(); // Bersihkan map dokter
        try {
            String sql = "SELECT kode_supplier, nama_supplier FROM supplier";
            PreparedStatement stat = conn.prepareStatement(sql);
            ResultSet rs = stat.executeQuery();
            
            while (rs.next()) {
                String idSupplier = rs.getString("kode_supplier");
                String namaSupplier = rs.getString("nama_supplier");
                kdsupplier.addItem(namaSupplier);// Add a default item
                kodeSupplier.put(namaSupplier, idSupplier); // Add SupplierItem objects
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal ambil data kode supplier: " + e.getMessage());
        }
    }

    private void datatable() {
        Object[] Baris = {"No. Transaksi", "Tanggal", "Barang", "Jumlah", "Supplier"};
        tabmode = new DefaultTableModel(null, Baris);
        tblBrngMasuk.setModel(tabmode);
    

        String sql =  "SELECT bm.no_transaksi,bm.tanggal,bm.jumlah,bm.kode_barang,bm.kode_supplier,b.nama_barang,s.nama_supplier FROM barang_masuk AS bm JOIN barang AS b ON bm.kode_barang = b.kode_barang JOIN supplier AS s ON bm.kode_supplier = s.kode_supplier  ORDER BY bm.tanggal DESC ;";
        try {
            Statement stat = conn.createStatement();
            ResultSet hasil = stat.executeQuery(sql);
            while (hasil.next()) {
                String a = hasil.getString("no_transaksi");
                String b = hasil.getString("tanggal");
                String c = hasil.getString("nama_barang");
                String d = hasil.getString("jumlah");
                String e = hasil.getString("nama_supplier");

                String[] data = {a, b, c, d, e};
                tabmode.addRow(data);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal Tampil Data: " + e.getMessage());
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kdbarang1 = new javax.swing.JComboBox<>();
        lBarang1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lTgl = new javax.swing.JLabel();
        lBarang = new javax.swing.JLabel();
        lJml = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBrngMasuk = new javax.swing.JTable();
        tgl = new com.toedter.calendar.JDateChooser();
        jml = new javax.swing.JSpinner();
        kdbarang = new javax.swing.JComboBox<>();
        bcreate = new javax.swing.JButton();
        bupdate = new javax.swing.JButton();
        bdelete = new javax.swing.JButton();
        kdsupplier = new javax.swing.JComboBox<>();
        lSupplier = new javax.swing.JLabel();

        kdbarang1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lBarang1.setText("Kode Barang");

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Barang Masuk");

        lTgl.setText("Tanggal");

        lBarang.setText("Barang");

        lJml.setText("Jumlah");

        tblBrngMasuk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No. Transaksi", "Tanggal", "Barang", "Jumlah", "Supplier"
            }
        ));
        tblBrngMasuk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBrngMasukMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBrngMasuk);

        kdbarang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        bcreate.setText("Tambah");
        bcreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcreateActionPerformed(evt);
            }
        });

        bupdate.setText("Edit");
        bupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bupdateActionPerformed(evt);
            }
        });

        bdelete.setText("Hapus");
        bdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdeleteActionPerformed(evt);
            }
        });

        kdsupplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lSupplier.setText("Supplier");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(bcreate)
                                .addGap(52, 52, 52)
                                .addComponent(bupdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bdelete))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lTgl, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lBarang)
                                            .addComponent(lJml))
                                        .addGap(67, 67, 67))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lSupplier)
                                        .addGap(65, 65, 65)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(kdsupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jml, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tgl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(kdbarang, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTgl)
                    .addComponent(tgl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lBarang)
                    .addComponent(kdbarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lSupplier)
                    .addComponent(kdsupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lJml)
                    .addComponent(jml, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bcreate)
                    .addComponent(bupdate)
                    .addComponent(bdelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bcreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcreateActionPerformed
        // Add validation for empty selection if needed, similar to your original code
         if (kdbarang.getSelectedIndex() == -1 || kdsupplier.getSelectedIndex() == -1) {
             JOptionPane.showMessageDialog(null, "Silakan pilih barang dan supplier terlebih dahulu.");
             return;
         }

        // --- Retrieve the selected kode_barang ---
        String selectedNamaBarang = (String) kdbarang.getSelectedItem();
        if (selectedNamaBarang == null) { // Handle case where nothing is selected
            JOptionPane.showMessageDialog(null, "Silakan pilih barang terlebih dahulu.");
            return;
        }
        String kodeBarangSelected = kodeBarang.get(selectedNamaBarang); // Get the actual kode_barang from the map

        if (kodeBarangSelected == null) { // This means the selected item wasn't found in your map (unlikely if populated correctly)
            JOptionPane.showMessageDialog(null, "Error: Kode barang tidak ditemukan untuk '" + selectedNamaBarang + "'.");
            return;
        }

        // --- Retrieve the selected kode_supplier for 'tujuan' ---
        String selectedNamaSupplier = (String) kdsupplier.getSelectedItem();
        if (selectedNamaSupplier == null) { // Handle case where nothing is selected
            JOptionPane.showMessageDialog(null, "Silakan pilih supplier terlebih dahulu.");
            return;
        }
        String kodeSupplierSelected = kodeSupplier.get(selectedNamaSupplier); // Get the actual kode_supplier from the map

        if (kodeSupplierSelected == null) {
            JOptionPane.showMessageDialog(null, "Error: Kode supplier tidak ditemukan untuk '" + selectedNamaSupplier + "'.");
            return;
        }


        String insertBarangMasukSQL = "INSERT INTO barang_masuk (no_transaksi, tanggal, kode_barang, jumlah, kode_supplier) VALUES (?, ?, ?, ?, ?)";
        String updateStokSQL = "UPDATE barang SET stok = stok + ? WHERE kode_barang = ?";

        try {
            conn.setAutoCommit(false); // Start transaction for atomicity

            PreparedStatement stat = conn.prepareStatement(insertBarangMasukSQL);

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String tanggal = tgl.getDate() != null ? sdf.format(tgl.getDate()) : sdf.format(new Date());
            String uniqueId = UUID.randomUUID().toString().replace("-", "").substring(0, 3).toUpperCase();
            String transactionId = "TRX-IN-" + uniqueId; // Changed to TRX-IN for clarity for outgoing

            int jumlahKeluar = (Integer) jml.getValue(); // Assuming jml is a JSpinner returning an Integer

            stat.setString(1, transactionId);
            stat.setString(2, tanggal);
            stat.setString(3, kodeBarangSelected); // Use the actual kode_barang from the map
            stat.setInt(4, jumlahKeluar);        // Use the integer value
            stat.setString(5, kodeSupplierSelected); // Use the actual kode_supplier for 'tujuan' from the map

            stat.executeUpdate(); // Execute the insert first

            // --- Now update stock ---
            PreparedStatement updateStokStat = conn.prepareStatement(updateStokSQL);
            updateStokStat.setInt(1, jumlahKeluar);   // Decrement by the quantity
            updateStokStat.setString(2, kodeBarangSelected); // For the specific item code from the map

            int rowsAffected = updateStokStat.executeUpdate();

            if (rowsAffected == 0) {
                conn.rollback(); // Rollback the insert if stock update fails
                JOptionPane.showMessageDialog(null, "Kode barang tidak ditemukan di tabel barang. Transaksi dibatalkan.");
                return;
            }

            conn.commit(); // Commit both operations if successful

            JOptionPane.showMessageDialog(null, "Data Barang Masuk Berhasil Disimpan dan Stok Diperbarui.");
            kosong();
            datatable();
        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback(); // Rollback on error
                }
            } catch (SQLException ex) {
                System.err.println("Rollback failed: " + ex.getMessage());
            }
            JOptionPane.showMessageDialog(null, "Data Gagal Disimpan: " + e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Revert to default auto-commit mode
                }
            } catch (SQLException ex) {
                System.err.println("Failed to reset auto-commit: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_bcreateActionPerformed

    private void bupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bupdateActionPerformed
        int selectedRow = tblBrngMasuk.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Pilih data yang akan diupdate terlebih dahulu.");
            return;
        }

        String idBarangMasuk = tblBrngMasuk.getValueAt(selectedRow, 0).toString();
        int oldJumlah = 0;
        String oldKodeBarang = "";

        // --- System.out.println for initial selected row data ---
        System.out.println("--- Update Action Triggered ---");
        System.out.println("Selected Row No Transaksi (idBarangMasuk): " + idBarangMasuk);

        // --- Step 1: Get old quantity and barang_kode before update ---
        String selectOldDataSql = "SELECT jumlah, kode_barang FROM barang_masuk WHERE no_transaksi = ?";
        try (PreparedStatement psSelect = conn.prepareStatement(selectOldDataSql)) {
            psSelect.setString(1, idBarangMasuk);
            try (java.sql.ResultSet rs = psSelect.executeQuery()) {
                if (rs.next()) {
                    oldJumlah = rs.getInt("jumlah");
                    oldKodeBarang = rs.getString("kode_barang");
                    // --- System.out.println for old data retrieved ---
                    System.out.println("Old Data Retrieved: Old Jumlah = " + oldJumlah + ", Old Kode Barang = " + oldKodeBarang);
                } else {
                    JOptionPane.showMessageDialog(null, "Data barang masuk tidak ditemukan untuk No Transaksi: " + idBarangMasuk);
                    return;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal mendapatkan data lama: " + e.getMessage());
            return;
        }

        // --- Step 2: Update barang_masuk record ---
        String updateBarangMasukSql = "UPDATE barang_masuk SET tanggal=?, kode_barang=?, jumlah=?, kode_supplier=? WHERE no_transaksi=?";
        try {
            conn.setAutoCommit(false); // Start transaction

            PreparedStatement stat = conn.prepareStatement(updateBarangMasukSql);

            // Format tanggal ke yyyy-MM-dd
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String tanggal = tgl.getDate() != null ? sdf.format(tgl.getDate()) : sdf.format(new Date());

            int newJumlah = ((Number) jml.getValue()).intValue(); // Get new quantity
            
            String selectedNamaBarang = kdbarang.getSelectedItem().toString(); // This gets the displayed name
            String newKodeBarang = kodeBarang.get(selectedNamaBarang); // Use the map to get the CODE
            // --- End FIX ---

            String newKodeSupplier = kdsupplier.getSelectedItem().toString(); // Assuming you also have a kodeSupplier map
            // --- FIX: Get the actual kode_supplier from the map ---
            String selectedNamaSupplier = kdsupplier.getSelectedItem().toString(); // This gets the displayed name
            String newKodeSupplierValue = kodeSupplier.get(selectedNamaSupplier); // Use the map to get the CODE
            // --- End FIX ---


            // Add a check in case the map somehow doesn't contain the key
            if (newKodeBarang == null) {
                JOptionPane.showMessageDialog(null, "Kode Barang tidak ditemukan untuk nama yang dipilih: " + selectedNamaBarang + ". Harap pilih ulang atau periksa data barang.");
                conn.rollback(); // Rollback transaction if the code isn't found
                return;
            }
            if (newKodeSupplierValue == null) {
                JOptionPane.showMessageDialog(null, "Kode Supplier tidak ditemukan untuk nama yang dipilih: " + selectedNamaSupplier + ". Harap pilih ulang atau periksa data supplier.");
                conn.rollback(); // Rollback transaction if the code isn't found
                return;
            }

            // --- System.out.println for new data to be used in update ---
            System.out.println("New Data for Update:");
            System.out.println("  Tanggal (Formatted): " + tanggal);
            System.out.println("  Kode Barang: " + newKodeBarang + " (Length: " + newKodeBarang.length() + ")"); // Check length here!
            System.out.println("  Jumlah: " + newJumlah);
            System.out.println("  Kode Supplier: " + newKodeSupplierValue);
            System.out.println("  WHERE No Transaksi: " + idBarangMasuk);


            stat.setString(1, tanggal);
            stat.setString(2, newKodeBarang);
            stat.setInt(3, newJumlah);
            stat.setString(4, newKodeSupplierValue);
            stat.setString(5, idBarangMasuk);

            int rowsAffectedBarangMasuk = stat.executeUpdate();
            System.out.println("Barang Masuk Update: Rows Affected = " + rowsAffectedBarangMasuk);
            if (rowsAffectedBarangMasuk == 0) {
                System.out.println("WARNING: No rows updated in barang_masuk table. Check if 'no_transaksi' exists and matches.");
            }


            // --- Step 3: Adjust stock in barang table ---
            // Calculate the difference in quantity
            int quantityDifference = newJumlah - oldJumlah;
            System.out.println("Stock Adjustment Calculation: New Jumlah = " + newJumlah + ", Old Jumlah = " + oldJumlah + ", Difference = " + quantityDifference);


            // If the item code has changed, we need to adjust stock for both old and new item codes
            if (!oldKodeBarang.equals(newKodeBarang)) {
                System.out.println("Kode Barang Changed: Old = " + oldKodeBarang + ", New = " + newKodeBarang);
                // Revert stock for the old item
                String updateOldBarangStockSql = "UPDATE barang SET stok = stok - ? WHERE kode_barang = ?";
                try (PreparedStatement psUpdateOldStock = conn.prepareStatement(updateOldBarangStockSql)) {
                    psUpdateOldStock.setInt(1, oldJumlah);
                    psUpdateOldStock.setString(2, oldKodeBarang);
                    // --- System.out.println for old stock adjustment ---
                    System.out.println("  Adjusting OLD item stock: Subtracting " + oldJumlah + " from " + oldKodeBarang);
                    int rowsAffectedOldStock = psUpdateOldStock.executeUpdate();
                    System.out.println("  Old Item Stock Update: Rows Affected = " + rowsAffectedOldStock);
                    if (rowsAffectedOldStock == 0) {
                        System.out.println("  WARNING: No rows updated for old item stock. Check if old_kode_barang '" + oldKodeBarang + "' exists in 'barang' table.");
                    }
                }

                // Add stock for the new item
                String updateNewBarangStockSql = "UPDATE barang SET stok = stok + ? WHERE kode_barang = ?";
                try (PreparedStatement psUpdateNewStock = conn.prepareStatement(updateNewBarangStockSql)) {
                    psUpdateNewStock.setInt(1, newJumlah);
                    psUpdateNewStock.setString(2, newKodeBarang);
                    // --- System.out.println for new stock adjustment ---
                    System.out.println("  Adjusting NEW item stock: Adding " + newJumlah + " to " + newKodeBarang);
                    int rowsAffectedNewStock = psUpdateNewStock.executeUpdate();
                    System.out.println("  New Item Stock Update: Rows Affected = " + rowsAffectedNewStock);
                    if (rowsAffectedNewStock == 0) {
                        System.out.println("  WARNING: No rows updated for new item stock. Check if new_kode_barang '" + newKodeBarang + "' exists in 'barang' table.");
                    }
                }
            } else {
                // If the item code is the same, just adjust stock by the difference
                System.out.println("Kode Barang is Same: " + newKodeBarang);
                String updateBarangStockSql = "UPDATE barang SET stok = stok + ? WHERE kode_barang = ?";
                try (PreparedStatement psUpdateStock = conn.prepareStatement(updateBarangStockSql)) {
                    psUpdateStock.setInt(1, quantityDifference);
                    psUpdateStock.setString(2, newKodeBarang);
                    // --- System.out.println for stock adjustment (same item) ---
                    System.out.println("  Adjusting SAME item stock: Adding " + quantityDifference + " to " + newKodeBarang);
                    int rowsAffectedStock = psUpdateStock.executeUpdate();
                    System.out.println("  Same Item Stock Update: Rows Affected = " + rowsAffectedStock);
                    if (rowsAffectedStock == 0) {
                        System.out.println("  WARNING: No rows updated for item stock. Check if kode_barang '" + newKodeBarang + "' exists in 'barang' table.");
                    }
                }
            }

            conn.commit(); // Commit transaction
            JOptionPane.showMessageDialog(null, "Data Berhasil Diupdate dan Stok Disesuaikan");
            kosong();
            datatable();
            System.out.println("--- Update Action Completed Successfully ---");

        } catch (SQLException e) {
            try {
                conn.rollback(); // Rollback transaction on error
            } catch (SQLException ex) {
                System.err.println("Error during rollback: " + ex.getMessage());
            }
            JOptionPane.showMessageDialog(null, "Data Gagal Diupdate: " + e.getMessage());
            System.err.println("Error during update process: " + e.getMessage()); // Print full error
            e.printStackTrace(); // Print stack trace for detailed error
        } finally {
            try {
                conn.setAutoCommit(true); // Restore auto-commit
            } catch (SQLException ex) {
                System.err.println("Error restoring auto-commit: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_bupdateActionPerformed

    private void bdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdeleteActionPerformed
        int selectedRow = tblBrngMasuk.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Pilih data yang akan dihapus terlebih dahulu.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(null,
                "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Mengambil no_transaksi dari kolom pertama (indeks 0) tabel
            String noTransaksiToDelete = tblBrngMasuk.getValueAt(selectedRow, 0).toString();

            // SQL untuk mengambil jumlah dan kode_barang dari barang_keluar sebelum dihapus
            String getInfoBarangKeluarSQL = "SELECT kode_barang, jumlah FROM barang_masuk WHERE no_transaksi = ?";
            // SQL untuk mengembalikan stok di tabel barang
            String updateStokSQL = "UPDATE barang SET stok = stok + ? WHERE kode_barang = ?";
            // SQL untuk menghapus data dari barang_keluar
            String deleteBarangKeluarSQL = "DELETE FROM barang_masuk WHERE no_transaksi = ?";

            PreparedStatement psGetInfo = null;
            PreparedStatement psUpdateStok = null;
            PreparedStatement psDelete = null;
            ResultSet rsInfo = null;

            try {
                // Memulai transaksi
                conn.setAutoCommit(false);

                // 1. Ambil kode_barang dan jumlah dari barang_keluar
                psGetInfo = conn.prepareStatement(getInfoBarangKeluarSQL);
                psGetInfo.setString(1, noTransaksiToDelete);
                System.out.println(psGetInfo);
                rsInfo = psGetInfo.executeQuery();

                String kodeBarang = null;
                int jumlahYangDikeluarkan = 0;

                if (rsInfo.next()) {
                    kodeBarang = rsInfo.getString("kode_barang");
                    jumlahYangDikeluarkan = rsInfo.getInt("jumlah");
                } else {
                    // Jika no_transaksi tidak ditemukan di barang_keluar (harusnya tidak terjadi jika data diambil dari tabel)
                    JOptionPane.showMessageDialog(null, "Data transaksi tidak ditemukan di database.");
                    conn.rollback(); // Rollback transaksi
                    return;
                }

                // 2. Update stok barang (kembalikan stok)
                psUpdateStok = conn.prepareStatement(updateStokSQL);
                psUpdateStok.setInt(1, jumlahYangDikeluarkan); // Tambahkan kembali jumlah yang dikeluarkan
                psUpdateStok.setString(2, kodeBarang);
                int rowsAffectedStok = psUpdateStok.executeUpdate();

                if (rowsAffectedStok == 0) {
                    JOptionPane.showMessageDialog(null, "Kode barang '" + kodeBarang + "' tidak ditemukan di tabel barang. Gagal mengupdate stok. Transaksi dibatalkan.");
                    conn.rollback(); // Rollback transaksi jika update stok gagal
                    return;
                }

                // 3. Hapus data dari barang_keluar
                psDelete = conn.prepareStatement(deleteBarangKeluarSQL);
                psDelete.setString(1, noTransaksiToDelete);
                psDelete.executeUpdate();

                // Commit transaksi jika semua operasi berhasil
                conn.commit();

                JOptionPane.showMessageDialog(null, "Data Berhasil Dihapus dan Stok Barang Dikembalikan.");
                kosong(); // Panggil method untuk mereset form
                datatable(); // Panggil method untuk merefresh tabel
            } catch (SQLException e) {
                try {
                    if (conn != null) {
                        conn.rollback(); // Rollback transaksi jika terjadi kesalahan
                    }
                } catch (SQLException ex) {
                    System.err.println("Error saat rollback: " + ex.getMessage());
                }
                JOptionPane.showMessageDialog(null, "Data Gagal Dihapus: " + e.getMessage());
                e.printStackTrace(); // Cetak stack trace untuk debugging lebih lanjut
            } finally {
                // Pastikan untuk menutup semua PreparedStatement dan ResultSet di blok finally
                try {
                    if (rsInfo != null) rsInfo.close();
                    if (psGetInfo != null) psGetInfo.close();
                    if (psUpdateStok != null) psUpdateStok.close();
                    if (psDelete != null) psDelete.close();
                    if (conn != null) conn.setAutoCommit(true); // Kembalikan auto-commit ke true
                } catch (SQLException ex) {
                    System.err.println("Error saat menutup resource: " + ex.getMessage());
                }
            }
        }
        // TODO add your handling code here: 
    }//GEN-LAST:event_bdeleteActionPerformed

    private void tblBrngMasukMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBrngMasukMouseClicked
        // Get the selected row index
        int selectedRow = tblBrngMasuk.getSelectedRow();

        // Ensure a row is actually selected
        if (selectedRow != -1) {
            try {
                // Get data from the selected row of the table model
                String noTransaksi = tblBrngMasuk.getValueAt(selectedRow, 0).toString();
                String tanggalStr = tblBrngMasuk.getValueAt(selectedRow, 1).toString(); // Assuming date is in column 1
                String kodeBarang = tblBrngMasuk.getValueAt(selectedRow, 2).toString(); // Assuming item code is in column 2
                String jumlahStr = tblBrngMasuk.getValueAt(selectedRow, 3).toString();   // Assuming quantity is in column 3
                String kodeSupplier = tblBrngMasuk.getValueAt(selectedRow, 4).toString(); // Assuming supplier code is in column 4

                // Populate the input fields
//                txtNoTransaksi.setText(noTransaksi); // Assuming you have a JTextField named txtNoTransaksi for no_transaksi

                // Set the date picker (tgl)
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Match your date format
                java.util.Date date = sdf.parse(tanggalStr);
                tgl.setDate(date); // Assuming 'tgl' is your JDateChooser or similar component

                // Set the JComboBox for item code (kdbarang)
                kdbarang.setSelectedItem(kodeBarang); // Assuming 'kdbarang' is your JComboBox

                // Set the JSpinner for quantity (jml)
                jml.setValue(Integer.parseInt(jumlahStr)); // Assuming 'jml' is your JSpinner

                // Set the JComboBox for supplier code (kdsupplier)
                kdsupplier.setSelectedItem(kodeSupplier); // Assuming 'kdsupplier' is your JComboBox

                // Disable the transaction number field as it's typically not editable after creation
//                txtNoTransaksi.setEnabled(false);

            } catch (java.text.ParseException ex) {
                JOptionPane.showMessageDialog(null, "Error parsing date: " + ex.getMessage());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Error parsing number: " + ex.getMessage());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error setting data to fields: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_tblBrngMasukMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bcreate;
    private javax.swing.JButton bdelete;
    private javax.swing.JButton bupdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jml;
    private javax.swing.JComboBox<String> kdbarang;
    private javax.swing.JComboBox<String> kdbarang1;
    private javax.swing.JComboBox<String> kdsupplier;
    private javax.swing.JLabel lBarang;
    private javax.swing.JLabel lBarang1;
    private javax.swing.JLabel lJml;
    private javax.swing.JLabel lSupplier;
    private javax.swing.JLabel lTgl;
    private javax.swing.JTable tblBrngMasuk;
    private com.toedter.calendar.JDateChooser tgl;
    // End of variables declaration//GEN-END:variables
}
